---
import { getCollection } from "astro:content";
import Layout from "../../layout/layout.astro";
import CardItem from "../../components/CardItem.astro";

import {
  getYearFromDate,
  slugify,
  getYouTubeVideoId,
} from "../../utils/utils.ts";
import { Image } from "astro:assets";
import { Status } from "../../utils/constants";

export async function getStaticPaths() {
  const items = await getCollection("filmography");
  const slugs: {
    params: { slug: string };
    props: { item: (typeof items)[0] };
  }[] = [];

  items.map((item) => {
    if (item.data.trailers && item.data.trailers!.length > 0) {
      for (var i = 0; i < item.data.trailers!.length; i++) {
        slugs.push({
          params: { slug: slugify(item.data.title) + "-trailer" + (i + 1) },
          props: { item },
        });
      }
    }
    slugs.push({
      params: { slug: slugify(item.data.title) },
      props: { item },
    });
  });

  return slugs;
}

const { slug } = Astro.params;
const lastChar = slug.charAt(slug.length - 1);
const index = isNaN(Number(lastChar)) ? NaN : Number(lastChar) - 1;
const { item } = Astro.props;
const year = getYearFromDate(item.data.releasedstatus);
---

<Layout title="Filmography" isHome={false}>
  <div class="container">
    <div class="main">
      <a href={"/filmography/" + slugify(item.data.title)}
        ><h4>
          {item.data.title}
          {year.length > 0 && "(" + year + ")"}
        </h4></a
      >
      {
        !slug.includes("trailer") && (
          <figure>
            <Image
              src={item.data.banner.high}
              widths={[240, 540, 720, item.data.banner.high.width]}
              sizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 1600px) 720px, ${item.data.banner.high.width}px`}
              alt={item.data.title}
              class="image"
            />
          </figure>
        )
      }
      {
        slug.includes("trailer") && (
          <iframe
            width="100%"
            height="415"
            src={item.data.trailers && item.data.trailers[index].embed}
            title="YouTube video player"
            frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen
            class="player"
          />
        )
      }
      <div class="description">
        <div class="trailers">
          {
            item.data.trailers?.map((t, i) => (
              <a
                href={
                  !t.embed
                    ? t.url
                    : "/filmography/" +
                      slugify(item.data.title) +
                      "-trailer" +
                      (i + 1)
                }
                target={!t.embed ? "_blank" : "_self"}
                class={index === i ? "active" : ""}
              >
                {t.name}
              </a>
            ))
          }
        </div>
        {item.data.description?.map((p) => <p>{p}</p>)}
      </div>
    </div>
    <aside>
      <div class="details">
        <div class="head"><h4>Details</h4></div>
        <div class="body">
          <table>
            <tr>
              <th>Drama : </th>
              <td> {item.data.title}</td>
            </tr>

            <tr>
              <th>Country : </th>
              <td>China</td>
            </tr>
            <tr>
              <th>Episodes: </th>
              <td>{item.data.episodes}</td>
            </tr>

            <tr>
              <th>Role : </th>
              <td>{item.data.role}</td>
            </tr>

            <tr>
              <th>Rating : </th>
              <td>{item.data.rating}</td>
            </tr>
            <tr>
              <th>Year : </th>
              <td>{year}</td>
            </tr>
            <tr>
              <th>Status : </th>
              <td>{Status[item.data.status as keyof typeof Status]}</td>
            </tr>
          </table>
        </div>
      </div>
      <div class="watch">
        <div class="head"><h4>Where to watch</h4></div>
        <div class="body">
          {item.data.watchlinks?.map((item) => <CardItem item={item} />)}
        </div>
      </div>
    </aside>
  </div>
</Layout>
<style>
  .container {
    display: flex;
    padding: 4rem 2rem;
    gap: 2rem;
  }

  .main {
    flex: 4;
    background-color: #2d3436;
    padding-inline: 1.2rem;
    padding-block: 0.8rem;
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
  }

  aside {
    flex: 2;
    display: flex;
    flex-direction: column;
    gap: 2rem;
    height: fit-content;
  }
  aside > * {
    padding: 0.8rem 1.2rem;
  }
  .details {
    background-color: #2d3436;
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
  }
  .details .body {
    font-size: 0.9rem;
  }
  tr {
    text-align: left;
  }
  td {
    padding-left: 0.5rem;
  }
  .watch {
    background-color: #2d3436;
  }
  .description p {
    margin-block: 0.8rem;
  }
  .main img {
    width: 100%;
    height: 100%;
  }

  h4 {
    font-size: 1.3rem;
  }
  .watch .body {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-top: 1.2rem;
  }
  .active {
    background-color: green !important;
    color: white !important;
  }

  .trailers {
    display: flex;
    gap: 0.8rem;
    flex-wrap: wrap;
  }
  .trailers a {
    font-size: 0.8rem;
    background-color: gray;
    padding: 0.2rem 0.4rem;
    border-radius: 0.2rem;
  }
  .trailers a:hover {
    background-color: green;
  }
  /* Medium devices (landscape tablets, 768px and up) */
  @media only screen and (max-width: 768px) {
    .main {
      padding-inline: 1rem;
    }
    .container {
      flex-direction: column;
      padding-inline: 1rem;
    }
    .player {
      min-height: 230px;
    }
  }
</style>
